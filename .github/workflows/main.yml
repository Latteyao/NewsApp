name: iOS starter workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
          pod install --repo-update
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          # device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
          # 直接指定 iPhone 11
          device='iPhone 11'
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          # device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
          # 直接指定 iPhone 11
          device='iPhone 11'
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Create file status_build_test.txt and write the job status into it
        if: always()
        run: |
          echo ${{ job.status }} > status_build_test.txt
      - name: Upload file status_build_test.txt as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_build_test
          path: status_build_test.txt
  # 因为 notify-slack-action 跑在 Linux 系统所以另起一个 Job
  notify:
    needs: [ build ]
    if: always()
    name: Notify Slack
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact pass_status_build_test
        uses: actions/download-artifact@v1
        with:
          name: pass_status_build_test
      - name: Set the statuses of Job build output parameters
        id: set_outputs
        run: |
          echo "::set-output name=status_build_test::$(<pass_status_build_test/status_build_test.txt)"
      - name: Notify Slack
        uses: ravsamhq/notify-slack-action@v1
        if: always()
        with:
          status: ${{ steps.set_outputs.outputs.status_build_test }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
